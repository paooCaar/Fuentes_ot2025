En el nivel Warmup, la solución fue muy sencilla: la expresión regular foo. Todas las cadenas correctas contenían esta secuencia de letras, y ninguna de las incorrectas la incluía. Con buscar el literal “foo” se resolvió el reto.

En el nivel Anchors, las palabras correctas terminaban con la letra k, mientras que las incorrectas no. Se empleó k$, donde $ marca el final de la cadena. De esta forma, la coincidencia solo ocurre en cadenas que acaban en “k”.

En el nivel It never ends, no estaba permitido usar el ancla de fin de línea $. La solución fue fu\b. El patrón fu busca esa secuencia exacta y \b (límite de palabra) asegura que después de la “u” no aparezca otro carácter alfanumérico. Esto hace que coincidan “fu”, “tofu” y “snafu”, pero no “fusillade” ni “functional”. Una alternativa equivalente es fu(?!\w), que con lookahead negativo evita cualquier carácter de palabra después de “fu”.

En el nivel Ranges, se reconoció que las cadenas correctas solo usaban letras de la a a la f, mientras que las incorrectas incluían caracteres fuera de ese rango. La expresión fue ^[a-f]*$: el ^ marca el inicio, [a-f] define el conjunto permitido, * indica cero o más repeticiones, y $ cierra el patrón al final de la cadena.

En el nivel Backrefs, la clave fue detectar repeticiones. La expresión (...).*\1 funciona porque (…) captura un bloque de tres caracteres, .* permite que aparezca cualquier secuencia intermedia, y \1 exige que se repita el bloque inicial. Así se seleccionan las cadenas que contienen duplicados de tres caracteres.

En el nivel Abba, el reto fue impedir caracteres repetidos de forma consecutiva y, además, cubrir el caso especial de “ef”. La solución fue ^(?!.*(.)\1)|ef. El fragmento ^(?!.*(.)\1) aplica un lookahead negativo que descarta cadenas con repeticiones inmediatas, mientras que la alternativa |ef asegura que “ef” sea aceptada. De esta manera, se distinguen correctamente los dos conjuntos.

En el nivel A man, a plan, se usó la expresión ^(.)[^p].*\1$. Aquí (.) captura el primer carácter, [^p] impide que la segunda posición sea la letra “p”, .* permite cualquier secuencia intermedia, y \1$ asegura que la cadena termine con el mismo carácter capturado al inicio. El patrón refleja la estructura que cumplen las cadenas correctas.

En el nivel Prime, la expresión fue ^(?!(..+)\1+$). Este lookahead negativo descarta cualquier cadena que pueda dividirse en varias repeticiones de un mismo bloque más corto. En consecuencia, solo se aceptan las cadenas “primas”, que no son repetición de otra más pequeña.

En el nivel Four, se utilizó (.)(.\1){3}. El (.) captura un carácter, y el grupo (.\1){3} exige que esa misma captura se repita tres veces más con un patrón alternante. De esta forma, se garantiza que aparezca cuatro veces el mismo carácter, tal como ocurre en las cadenas correctas.
